{"version":3,"sources":["data/services/api/index.js","components/AuthForm/index.js","components/AuthForm/services.js","components/ChatBox/services.js","components/ChatBox/Messages.js","components/ChatBox/NoChatBoxScreen.js","components/ChatBox/index.js","components/Home/index.js","components/Home/services.js","serviceWorker.js","index.js","utils/displayUsernameAndHour.js"],"names":["fetchChannels","a","axios","get","response","channels","data","createChannel","name","post","fetchMessages","id","messages","postMessages","content","channel_id","message","signIn","username","password","signUp","whoAmI","AuthForm","props","useState","setUsername","setPassword","shouldPromptSignInForm","setShouldPromptSignInForm","setShouldTriggerAuth","console","log","useAuthForm","shouldSignIn","handleSetUsername","e","handleSetPassword","handleSubmit","preventDefault","className","onSubmit","type","placeholder","value","onChange","target","onClick","useMessages","channelId","setMessages","contentValue","setContentValue","createMessage","_fetchMessages","useEffect","socket","socketIOClient","on","_getLiveMessages","disconnect","Messages","match","params","_createNewMessage","map","index","key","isUsernameAndHourNeedToBeDisplayed","formatHour","updated_at","NoChatBoxScreen","ChatBox","exact","path","component","Home","setChannels","shouldPromptModalCreateChannel","setShouldPromptModalCreateChannel","currentNewChannelName","setCurrentNewChannelName","shouldTriggerAuth","setUser","_checkAuth","_fetchChannels","checkAuthAndFetchChannels","getLiveChannels","then","catch","error","status","useChannels","sShouldPromptModalCreateChannel","createNewChannel","length","channel","to","Boolean","window","location","hostname","require","config","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","date","formatMinutes","newDate","Date","hours","getHours","minutes","getMinutes","toString","module","exports"],"mappings":"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","file":"static/js/main.f8ca42ab.chunk.js","sourcesContent":["import axios from 'axios';\n\n// Channels\n\nexport const fetchChannels = async () => {\n  const response = await axios.get(`/api/channels`);\n  const channels = response.data;\n  return channels;\n};\n\nexport const createChannel = async name => {\n  await axios.post(`/api/channels`, {\n    name,\n  });\n};\n\n// Messages\n\nexport const fetchMessages = async id => {\n  const response = await axios.get(`/api/channels/${id}/messages`);\n  const messages = response.data;\n  return messages;\n};\n\nexport const postMessages = async (content, channel_id) => {\n  const data = { content, channel_id };\n  const response = await axios.post(`/api/messages`, data);\n  const message = response.data;\n  return message;\n};\n\n// auth\n\nexport const signIn = async (username, password) => {\n  const data = { username, password };\n  await axios.post(`/api/auth/signin`, data);\n};\n\nexport const signUp = async (username, password) => {\n  const data = { username, password };\n  await axios.post(`/api/auth/signup`, data);\n};\n\nexport const whoAmI = async () => {\n  await axios.get(`/api/whoami`);\n};\n","import React from 'react';\nimport { useAuthForm } from './services';\n\nimport './styles.css';\n\nconst AuthForm = props => {\n  const [\n    username,\n    password,\n    setUsername,\n    setPassword,\n    shouldSignIn,\n    shouldPromptSignInForm,\n    setShouldPromptSignInForm,\n  ] = useAuthForm();\n\n  const handleSetUsername = e => {\n    setUsername(e);\n  };\n\n  const handleSetPassword = e => {\n    setPassword(e);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    shouldSignIn(props.setShouldTriggerAuth);\n  };\n\n  const switchForm = () => {\n    setShouldPromptSignInForm(!shouldPromptSignInForm);\n  };\n\n  return (\n    <div className=\"form__container\">\n      <h2 className=\"form__title\">\n        {shouldPromptSignInForm ? 'Connexion' : 'Inscription'}\n      </h2>\n      {shouldPromptSignInForm ? (\n        <form onSubmit={handleSubmit} className=\"form__container__content\">\n          <label>Nom d'utilisateur :</label>\n          <input\n            className=\"form__input\"\n            name=\"username\"\n            type=\"text\"\n            placeholder=\"Nom d'utilisateur\"\n            value={username}\n            onChange={e => handleSetUsername(e.target.value)}\n          />\n          <label>Mot de passe :</label>\n          <input\n            className=\"form__input\"\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"Mot de passe\"\n            value={password}\n            onChange={e => handleSetPassword(e.target.value)}\n          />\n          <button type=\"submit\" className=\"btn__submit\">\n            Connexion\n          </button>\n        </form>\n      ) : (\n        <form onSubmit={handleSubmit} className=\"form__container__content\">\n          <label>Choisissez un nom d'utilisateur :</label>\n          <input\n            className=\"form__input\"\n            name=\"username\"\n            type=\"text\"\n            placeholder=\"Nom d'utilisateur\"\n            value={username}\n            onChange={e => handleSetUsername(e.target.value)}\n          />\n          <label>Choisissez un mot de passe :</label>\n          <input\n            className=\"form__input\"\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"Mot de passe\"\n            value={password}\n            onChange={e => handleSetPassword(e.target.value)}\n          />\n          <button type=\"submit\" className=\"btn__submit\">\n            Inscription\n          </button>\n        </form>\n      )}\n      <button onClick={switchForm} className=\"btn__switch\">\n        {shouldPromptSignInForm\n          ? 'Pas encore de compte ? Inscrivez-vous ! '\n          : 'Vous avez déjà un compte ? Connectez-vous !'}\n      </button>\n    </div>\n  );\n};\n\nexport default AuthForm;\n","import { useState } from 'react';\nimport { signIn, signUp } from '../../data/services/api';\n\nexport const useAuthForm = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [shouldPromptSignInForm, setShouldPromptSignInForm] = useState(true);\n\n  const shouldSignIn = async setShouldTriggerAuth => {\n    try {\n      shouldPromptSignInForm\n        ? await signIn(username, password)\n        : await signUp(username, password);\n      setShouldTriggerAuth(false);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return [\n    username,\n    password,\n    setUsername,\n    setPassword,\n    shouldSignIn,\n    shouldPromptSignInForm,\n    setShouldPromptSignInForm,\n  ];\n};\n","import { useState, useEffect } from 'react';\nimport socketIOClient from 'socket.io-client';\n\n// import { scrollToBottomOfElement } from '../../utils/animations';\n\nimport { fetchMessages, postMessages } from '../../data/services/api';\n\n// const endpoint = `${process.env.REACT_APP_API_BASE_URL}`;\n\nexport const useMessages = id => {\n  console.log('useMessages');\n  let channelId = id;\n\n  const [messages, setMessages] = useState([]);\n  const [contentValue, setContentValue] = useState('');\n\n  const createMessage = async () => {\n    await postMessages(contentValue, channelId);\n    await _fetchMessages(channelId);\n  };\n\n  const _fetchMessages = async channelId => {\n    console.log('_fetcheMessages');\n    setMessages(await fetchMessages(channelId));\n    // scrollToBottomOfElement('.container__chat__messages');\n  };\n\n  const _getLiveMessages = (socket, channelId) => {\n    socket.on('sendMessageToClient', data => {\n      _fetchMessages(channelId);\n      console.log('message from serv', data);\n      // scrollToBottomOfElement('.container__chat__messages');\n    });\n  };\n\n  useEffect(() => {\n    console.log('useEffect');\n    const socket = socketIOClient('');\n    _fetchMessages(channelId);\n    _getLiveMessages(socket, channelId);\n    return () => {\n      socket.disconnect();\n    };\n  }, [id]);\n\n  return { messages, createMessage, contentValue, setContentValue };\n};\n","import React from 'react';\nimport { useMessages } from './services';\nimport {\n  isUsernameAndHourNeedToBeDisplayed,\n  formatHour,\n} from '../../utils/displayUsernameAndHour';\nimport './styles.css';\n\nfunction Messages(props) {\n  const {\n    messages,\n    createMessage,\n    contentValue,\n    setContentValue,\n  } = useMessages(props.match.params.id);\n\n  const _createNewMessage = async e => {\n    e.preventDefault();\n    await createMessage();\n    setContentValue('');\n  };\n\n  const _setCurrentMessageContent = e => {\n    setContentValue(e.target.value);\n  };\n\n  return (\n    <div className=\"container__chat\">\n      <div className=\"container__chat__messages\">\n        {messages &&\n          messages.map((message, index) => (\n            <div className=\"container__message\" key={message.id}>\n              {isUsernameAndHourNeedToBeDisplayed(\n                index - 1,\n                message,\n                messages\n              ) && (\n                <div className=\"username__message\">\n                  <p className=\"username\">{message.username}</p>\n                  <p className=\"hour\">{formatHour(message.updated_at)}</p>\n                </div>\n              )}\n              <p className=\"content_message\">{message.content}</p>\n            </div>\n          ))}\n      </div>\n      <div className=\"container__chat__sendBox\">\n        <form className=\"form__chat__sendbox\" onSubmit={_createNewMessage}>\n          <input\n            className=\"input__chat__sendbox\"\n            placeholder=\"Envoyer un message\"\n            value={contentValue}\n            onChange={_setCurrentMessageContent}\n          />\n          <button className=\"button__chat__sendbox\" type=\"submit\">\n            Envoyer\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Messages;\n","import React from 'react';\nimport './styles.css';\n\nfunction NoChatBoxScreen() {\n  return (\n    <div className=\"container__chat\">\n      <p>No chat selected</p>\n    </div>\n  );\n}\n\nexport default NoChatBoxScreen;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport './styles.css';\n\nimport Messages from './Messages';\nimport NoChatBoxScreen from './NoChatBoxScreen';\n\nconst ChatBox = () => {\n  return (\n    <div className=\"container__chat\">\n      <Switch>\n        <Route exact path=\"/\" component={NoChatBoxScreen} />\n        <Route exact path=\"/channel/:id\" component={Messages} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default ChatBox;\n","import React from 'react';\nimport { useChannels } from './services';\nimport { Link } from 'react-router-dom';\n\nimport AuthForm from '../AuthForm';\nimport ChatBox from '../ChatBox';\n\nimport './styles.css';\n\nconst Home = () => {\n  const [\n    channels,\n    shouldPromptModalCreateChannel,\n    sShouldPromptModalCreateChannel,\n    createNewChannel,\n    currentNewChannelName,\n    setCurrentNewChannelName,\n    shouldTriggerAuth,\n    setShouldTriggerAuth,\n  ] = useChannels();\n\n  const _createNewChannel = e => {\n    e.preventDefault();\n    createNewChannel();\n  };\n\n  const _setCurrentNewChannelName = e => {\n    setCurrentNewChannelName(e.target.value);\n  };\n\n  if (shouldTriggerAuth === true) {\n    return (\n      <div className=\"container__modalCreateChannel\">\n        <AuthForm setShouldTriggerAuth={setShouldTriggerAuth} />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"container__channels\">\n        <div className=\"container__channels__containerTitle\">\n          <p className=\"container__channels__title\">Channels</p>\n          <button\n            onClick={sShouldPromptModalCreateChannel}\n            className=\"container__channels__button\"\n          >\n            <span className=\"container__channels__button__icon\">+</span>\n          </button>\n        </div>\n        <ul className=\"container__channels__list\">\n          {channels.length !== 0 &&\n            channels.map(channel => (\n              <Link\n                key={channel.id}\n                to={`/channel/${channel.id}`}\n                className=\"container__channels__list__element\"\n              >\n                <li className=\"container__channels__list__label\">\n                  # {channel.name}\n                </li>\n              </Link>\n            ))}\n        </ul>\n      </div>\n      <ChatBox />\n      {shouldPromptModalCreateChannel === true ? (\n        <div className=\"container__modalCreateChannel\">\n          <div className=\"container__modalCreateChannel__contentContainer\">\n            <div className=\"container__modalCreateChannel__contentContainer__Header\">\n              <span className=\"container__modalCreateChannel__contentContainer__Header__title\">\n                Create a channel\n              </span>\n              <button\n                onClick={sShouldPromptModalCreateChannel}\n                className=\"container__channels__button\"\n              >\n                <span className=\"container__channels__button__icon\">X</span>\n              </button>\n            </div>\n            <form\n              onSubmit={_createNewChannel}\n              className=\"container__modalCreateChannel__contentContainer__form\"\n            >\n              <input\n                placeholder=\"Nom du channel\"\n                value={currentNewChannelName}\n                onChange={_setCurrentNewChannelName}\n                className=\"container__modalCreateChannel__contentContainer__form__input\"\n              />\n              <button\n                className=\"container__modalCreateChannel__contentContainer__form__btn\"\n                type=\"submit\"\n              >\n                Valider\n              </button>\n            </form>\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Home;\n","import { useState, useEffect } from 'react';\nimport socketIOClient from 'socket.io-client';\n\nimport { fetchChannels, createChannel, whoAmI } from '../../data/services/api';\n\n// const endpoint = `${process.env.REACT_APP_API_BASE_URL}`;\n\nexport const useChannels = () => {\n  const [channels, setChannels] = useState([]);\n\n  const [\n    shouldPromptModalCreateChannel,\n    setShouldPromptModalCreateChannel,\n  ] = useState(false);\n\n  const [currentNewChannelName, setCurrentNewChannelName] = useState('');\n\n  const [shouldTriggerAuth, setShouldTriggerAuth] = useState(false);\n  const [user, setUser] = useState({});\n\n  useEffect(() => {\n    const socket = socketIOClient('');\n    const checkAuthAndFetchChannels = async () => {\n      await _checkAuth();\n      _fetchChannels();\n    }\n    checkAuthAndFetchChannels();\n    getLiveChannels(socket);\n    return () => {\n      socket.disconnect();\n    };\n  }, [shouldTriggerAuth]);\n\n  const _checkAuth = async () => {\n    await whoAmI()\n      .then(function(response) {\n        setUser(response);\n        setShouldTriggerAuth(false);\n      })\n      .catch(function(error) {\n        if (error.response.status === 404) {\n          setShouldTriggerAuth(true);\n        }\n      });\n  };\n\n  const _fetchChannels = async () => {\n    setChannels(await fetchChannels());\n  };\n\n  const sShouldPromptModalCreateChannel = () => {\n    setShouldPromptModalCreateChannel(!shouldPromptModalCreateChannel);\n  };\n\n  const createNewChannel = async () => {\n    await createChannel(currentNewChannelName);\n    setShouldPromptModalCreateChannel(!shouldPromptModalCreateChannel);\n    await _fetchChannels();\n  };\n\n  const getLiveChannels = socket => {\n    socket.on('sendChannelToClient', data => {\n      _fetchChannels();\n      console.log('channel from serv', data);\n    });\n  };\n\n  return [\n    channels,\n    shouldPromptModalCreateChannel,\n    sShouldPromptModalCreateChannel,\n    createNewChannel,\n    currentNewChannelName,\n    setCurrentNewChannelName,\n    shouldTriggerAuth,\n    setShouldTriggerAuth,\n  ];\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './components/Home';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nrequire('dotenv').config();\n\nReactDOM.render(\n  <BrowserRouter>\n    <Home />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const isUsernameAndHourNeedToBeDisplayed = (index, message, messages) => {\n  if (index >= 0) {\n    return messages[index].username === message.username &&\n      formatHour(messages[index].updated_at) === formatHour(message.updated_at)\n      ? false\n      : true;\n  }\n  return true;\n};\n\nconst formatHour = date => {\n  const newDate = new Date(date);\n  const hours = newDate.getHours();\n  const minutes = newDate.getMinutes();\n  let formatMinutes;\n\n  if (minutes.toString().length === 1) {\n    formatMinutes = `0${minutes}`;\n    return `${hours}:${formatMinutes}`;\n  }\n  return `${hours}:${minutes}`;\n};\n\nmodule.exports = {\n  isUsernameAndHourNeedToBeDisplayed,\n  formatHour,\n};\n"],"sourceRoot":""}